within OpalRT.Electrical.Branch.HVDC;
model CRANIT
  parameter Real R = 1 "Resistance p.u.";
  parameter Real X_init = 1 "Reactance p.u.";
  parameter Real B = 1 "Shunt half susceptance p.u.";
  constant Real pi = Modelica.Constants.pi;
  parameter Real T1 = 1 "(s)";
  parameter Real T2 = 3 "(s)";
  parameter Real T3 = 3 "(s) (> 0)";
  parameter Real TW = 2 "(s) (> 0)";
  parameter Real K = 0.1;
  parameter Real Xmax = 0.1 "(pu) max. limit on output";
  parameter Real Xmin = -0.1 "(pu) min. limit on output";
  parameter Real INmax = 10 "(pu) max. limit on input signal";
  parameter Real INmin = -10 "(pu) min. limit on input signal";
  parameter Real Vmag0_from = 1;
  parameter Real Vang0_from = 10;
  parameter Real Vmag0_to = 0.95;
  parameter Real Vang0_to = 0;
  constant Complex j = Modelica.ComplexMath.j;
  constant Real eps = Modelica.Constants.eps;
  parameter Real y0(fixed = false);
  Real X;
  Real t;
  OpalRT.NonElectrical.Math.Continuous.TransferFunction.Lag lag1(y_start = y0, T = T1) annotation(Placement(visible = true, transformation(origin = {-60, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  OpalRT.NonElectrical.Math.Continuous.TransferFunction.WashOutFilter washout_filter1(TW = TW, initType = Modelica.Blocks.Types.Init.InitialOutput, y_start = 0) annotation(Placement(visible = true, transformation(origin = {-20, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  OpalRT.NonElectrical.Math.Continuous.TransferFunction.LeadLag lead_lag1(TA = T2, TB = T3) annotation(Placement(visible = true, transformation(origin = {20, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Math.Gain gain1(k = K) annotation(Placement(visible = true, transformation(origin = {60, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Math.Add add1 annotation(Placement(visible = true, transformation(origin = {100, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Nonlinear.Limiter limiter1(uMax = INmax, uMin = INmin) annotation(Placement(visible = true, transformation(origin = {-100, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Nonlinear.Limiter limiter2(uMax = Xmax, uMin = Xmin) annotation(Placement(visible = true, transformation(origin = {140, 60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant const(k = X_init) annotation(Placement(visible = true, transformation(origin = {60, 20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  parameter Real B0(fixed = false);
  parameter Real v2r(fixed = false);
  parameter Real v2i(fixed = false);
  parameter Real v1r(fixed = false);
  parameter Real v1i(fixed = false);
  OpalRT.NonElectrical.Connector.PwPin p annotation(Placement(visible = true, transformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  OpalRT.NonElectrical.Connector.PwPin n annotation(Placement(visible = true, transformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
initial algorithm
  B0 := B / 2;
  v1r := Vmag0_from * cos(Vang0_from / 180 * pi);
  v1i := Vmag0_from * sin(Vang0_from / 180 * pi);
  v2r := Vmag0_to * cos(Vang0_to / 180 * pi);
  v2i := Vmag0_to * sin(Vang0_to / 180 * pi);
  y0 := Modelica.ComplexMath.real((v1r + j * v1i) * Modelica.ComplexMath.conj((v1r + j * v1i - (v2r + j * v2i)) / (R + j * X_init) + (v1r + j * v1i) * j * B0));
initial equation
  t = 0;
equation
  der(t) = 1;
  connect(const.y, add1.u2) annotation(Line(points = {{71, 20}, {79.2963, 20}, {79.2963, 53.5859}, {87.6861, 53.5859}, {87.6861, 53.5859}}, color = {0, 0, 127}));
  connect(add1.y, limiter2.u) annotation(Line(points = {{111, 60}, {126.928, 60}, {126.928, 60.3518}, {126.928, 60.3518}}, color = {0, 0, 127}));
  connect(gain1.y, add1.u1) annotation(Line(points = {{71, 60}, {76.0487, 60}, {76.0487, 66.8471}, {86.6035, 66.8471}, {86.6035, 66.8471}}, color = {0, 0, 127}));
  connect(lead_lag1.y, gain1.u) annotation(Line(points = {{30, 60}, {47.6319, 60}, {47.6319, 59.2693}, {47.6319, 59.2693}}, color = {0, 0, 127}));
  connect(washout_filter1.y, lead_lag1.u) annotation(Line(points = {{-10, 60}, {9.7429, 60}, {9.7429, 58.9986}, {9.7429, 58.9986}}, color = {0, 0, 127}));
  connect(lag1.y, washout_filter1.u) annotation(Line(points = {{-50, 60}, {-30.0406, 60}, {-30.0406, 59.5399}, {-30.0406, 59.5399}}, color = {0, 0, 127}));
  connect(limiter1.y, lag1.u) annotation(Line(points = {{-89, 60}, {-70.3654, 60}, {-70.3654, 59.5399}, {-70.3654, 59.5399}}, color = {0, 0, 127}));
  limiter2.y = X;
  -limiter1.u = p.vr * p.ir + p.vi * p.ii;
  (-(R * p.ir - X * p.ii)) + B0 * (R * p.vi + X * p.vr) = if t < eps then 0 else p.vr - n.vr;
  (-(R * p.ii + X * p.ir)) + B0 * ((-R * p.vr) + X * p.vi) = if t < eps then 0 else p.vi - n.vi;
  (-(R * n.ir - X * n.ii)) + B0 * (R * n.vi + X * n.vr) = if t < eps then 0 else -(p.vr - n.vr);
  (-(R * n.ii + X * n.ir)) + B0 * ((-R * n.vr) + X * n.vi) = if t < eps then 0 else -(p.vi - n.vi);
  annotation(Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {2, 2})), Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {2, 2}), graphics={  Rectangle(origin = {-0.270636, 0.811908}, extent = {{-100.135, 21.1096}, {100.135, -21.1096}})}));
end CRANIT;
